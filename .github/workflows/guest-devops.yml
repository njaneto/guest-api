# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Guest API

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean -B package --file pom.xml

  publish_docker_images:
      needs: build
      runs-on: ubuntu-latest
      #if: GitHub.ref == 'refs/heads/master' || GitHub.event_name == 'release'
      steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag njaneto/guest-api:$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\([^<]\+\)<\/version>.*$/\1/')
      - name: Login to DockerHub
        #if: GitHub.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image
        run: docker push njaneto/guest-api:$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\([^<]\+\)<\/version>.*$/\1/')

  deploy_docker_images:
    needs: publish_docker_images
    runs-on: ubuntu-latest
    #if: GitHub.ref == 'refs/heads/master' || GitHub.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy on GCP VM
        run: echo "we are working on it"
